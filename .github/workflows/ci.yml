name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-backend:
    name: Test Backend (Rust)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: portalyus_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          backend/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install sqlx-cli
      run: cargo install sqlx-cli --no-default-features --features postgres
    
    - name: Run database migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/portalyus_test
      run: sqlx migrate run
    
    - name: Check Rust formatting
      working-directory: ./backend
      run: cargo fmt --all -- --check
    
    - name: Run Clippy
      working-directory: ./backend
      run: cargo clippy -- -D warnings
    
    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/portalyus_test
      run: cargo test
    
    - name: Build backend
      working-directory: ./backend
      run: cargo build --release

  test-frontend:
    name: Test Frontend (Astro + React)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint || true
    
    - name: Type check
      working-directory: ./frontend
      run: npm run check
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-dist
        path: frontend/dist/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Rust Security Audit
      working-directory: ./backend
      run: |
        cargo install cargo-audit
        cargo audit
    
    - name: Node.js Security Audit
      working-directory: ./frontend
      run: npm audit --audit-level=high

  deploy:
    name: Deploy
    needs: [test-backend, test-frontend, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deployment step - configure based on your hosting provider"
        echo "This could include Docker builds, server deployments, etc."